services: 
  sso:
    ports:
     - "44044:44044"
    build:
      context: ./sso
      dockerfile: ./Dockerfile
    env_file:
     - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
  
  postgres:
    image: postgres:13.3
    env_file:
     - ./.env
    ports:
     - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 30s
      retries: 5
  
  migrate:
    image: migrate/migrate
    volumes:
     - ./sso/repository/postgres/psql_migrations:/migrations
    env_file:
     - ./.env
    command:
      [ "-path", 
      "/migrations", 
      "-database", 
      "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable", "up" ]
    depends_on:
      postgres:
        condition: service_healthy

  mailer:
    build:
      context: ./mailer
      dockerfile: ./Dockerfile
    env_file:
     - ./.env
    environment:
      KAFKA_BROKERS: kafka:9093
      KAFKA_TOPIC:  email_messages
      KAFKA_GROUP:  mailers
    depends_on:
      kafka:
        condition: service_healthy

  kafka:
    image: apache/kafka:3.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 6
  
  redis:
    image: redis:latest
    env_file:
     - ./.env
    ports:
     - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 30s
      retries: 5
